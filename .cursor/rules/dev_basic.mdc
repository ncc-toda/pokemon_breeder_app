---
description:
  Defines basic development principles for the project
  (readability,reusability,etc.).
globs:
alwaysApply: true
---

# 基本的な開発原則

## 1. 基本姿勢

### 1.1 可読性 (Readability)

- 常に読みやすく理解しやすいコードを目指してください。
- 適切な命名、一貫したフォーマット、明確なコメント（必要に応じて）を心がけてください。
- 詳細は `Dart コーディング規約` (`@dart_rules.mdc`) も参照してください。

### 1.2 再利用性 (Reusability)

- 共通のロジックや UI は積極的に関数、クラス、コンポーネントとして抽出し、再利用可能な設計を意識してください。

### 1.3 シンプルさ (Simplicity / KISS)

- 不必要に複雑な実装は避け、シンプルで直接的な解決策を優先してください。
- "You Ain't Gonna Need It"
  (YAGNI) の原則も考慮し、現時点で不要な機能の実装は見送ってください。

### 1.4 保守性 (Maintainability)

- 将来の変更や修正が容易に行えるように、疎結合で凝集度の高いコードを意識してください。

### 1.5 コミュニケーション

- ユーザー (開発依頼者) や他の開発者とのコミュニケーションは、常に明確かつ丁寧に行ってください。
- このプロジェクトでは、特に指定がない限り **日本語**
  でコミュニケーションをとってください。

### 1.6 重複実装の防止

- 新しい機能やコンポーネントを実装する前に、既存のコードベースに類似の機能や共通化できる箇所がないか確認してください。
- コードレビューなどを通じて、重複の可能性を指摘しあいましょう。

### 1.7 単一責任の原則 (Single Responsibility Principle - SRP)

- 各関数、クラス、ファイルは、それぞれ単一の明確な責務を持つように設計してください。
- 一つの要素が複数の責務を持っている場合は、適切に分割することを検討してください。

## 2. 設定・機密情報の扱い

- `.env`
  ファイルのような機密情報を含む可能性のあるファイルを直接作成・編集・削除する操作は AI エージェントが行わず、ユーザーに作業を依頼してください。
- API キー、パスワード、接続文字列などの機密情報や、頻繁に変更される可能性のある設定値、マジックナンバー（コード中に直接書かれた意味不明な数値や文字列）は、コードに直接埋め込まず、定数として定義するか、設定ファイルや環境変数から読み込むようにしてください。
- `.env`
  ファイルの直接参照は避け、DI（依存性注入）などを介して設定値を取得する仕組みを利用してください。

## 3. 公式ドキュメント準拠

- 開発にあたっては、使用している言語（Dart,
  Flutter）、フレームワーク（Flutter）、ライブラリ（Riverpod, freezed,
  GoRouter など）の公式ドキュメントやコミュニティで推奨されているベストプラクティスに準拠することを基本方針とします。
- 特に以下のドキュメントやスタイルガイドは重要な指針となります:
  - [Effective Dart](https://dart.dev/effective-dart)
  - [Flutter Style Guide](https://docs.flutter.dev/development/tools/flutter-fix)
  - [Riverpod 公式ドキュメント](https://riverpod.dev/ja/docs/introduction)
- 特定の理由で公式の推奨から逸脱する場合は、その理由をコードコメントやドキュメントに明記してください。
